---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by knia.
--- DateTime: 2019/3/8 19:44
---

--拼接公式字符串：1对1或1对4
function concat_formula_string(value,str)
    --print("do concat")
    --print(str)
    local match
    local table_ret = {}
    --第二次处理
    if type(str) == 'table' and type(value) == 'table' then
        for i, v in ipairs(str) do
            match = string.match(v,'{[%a%A]-}')
            table_ret[i] = string.gsub(v,match,tostring(value[i]..'%%'))
        end
        return table_ret
    end
    --只需一次处理或第一次处理
    if type(value) == 'table' then
        match = string.match(str,'{[%a%A]-}')
        for i, v in ipairs(value) do
            table_ret[i] = string.gsub(str,match,tostring(v..'%%'))
        end
        return table_ret
    else
        match = string.match(str,'{[%a%A]-}')
        return  string.gsub(str,match,value)
    end
end

--按照公式获取技能提升数值
function getFourmulaObject(full_desc)

    local formulas = XML_skill.formulas
    local pattern_res = {}
    local skill_levels = {0,0,0,0}
    local step_level = 0
    local exact_value = 0
    local final_res

    for res in string.gmatch(full_desc,'{[%a%A]-}') do
        table.insert(pattern_res,utils.StrToTable(res))
    end
    --不需要处理的字符串直接返回
    if pattern_res[1] == nil then
        return full_desc
    end

    for i, v in ipairs(pattern_res) do
        if v.id < 900000 then
            v.id = v.id * 10 + 1
        end
        if formulas[v.id].fix_level == 0 then
            exact_value = formulas[v.id].fix_percent * 0.01
            final_res = concat_formula_string(exact_value,full_desc)
        else
            if formulas[v.id].fix_level <= 99 then
                step_level = formulas[v.id].fix_level
            else
                step_level = formulas[v.id].fix_level * 0.01
            end
            if formulas[v.id].fix_percent <= 99 then
                skill_levels[1] = formulas[v.id].fix_percent
            else
                skill_levels[1] = formulas[v.id].fix_percent * 0.01
            end
            for i = 2, 4 do
                skill_levels[i] = skill_levels[i-1] + step_level
            end
            if i > 1 then
                final_res = concat_formula_string(skill_levels,final_res)
            else
                final_res = concat_formula_string(skill_levels,full_desc)
            end
            return final_res
        end
    end

end


--运行获得刻印特技表
function getExEquipSkill()

    local ex_skill_table = {}
    local temp_skills = {}
    local skill_names = Ex_skill_names.ex_skill_names

    --按技能名字获取
    local formulas = XML_skill.formulas
    local skill_group = XML_skill.skillgroup

    for sid, skill in pairs(skill_group) do
        for i, v in ipairs(skill_names) do
            if skill.name == v then
                ex_skill_table[sid] = skill
            end
        end
    end
    ex_skill_table = utils.table_arrange(ex_skill_table)
    for ex_skill_table_i, ex_skill_table_v in ipairs(ex_skill_table) do
        --print(ex_skill_table_v.key..","..ex_skill_table_v.name..","..utils.removeHtmlMark(ex_skill_table_v.full_desc))
        --print(v.key..","..v.name..","..getFourmulaObject(v.full_desc))
        local none_html_str = utils.removeHtmlMark(ex_skill_table_v.full_desc)
        local decs_res = getFourmulaObject(none_html_str)
        if type(decs_res) == 'string' then
            print(ex_skill_table_v.key..","..ex_skill_table_v.name..","..decs_res)
        else
            for decs_res_i, decs_res_v in ipairs(decs_res) do
                print(ex_skill_table_v.key..","..ex_skill_table_v.name..","..decs_res_v)
            end
        end
    end

end
